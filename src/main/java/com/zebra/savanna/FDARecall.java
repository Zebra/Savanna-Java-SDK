package com.zebra.savanna;import java.io.UnsupportedEncodingException;import java.lang.reflect.Type;import java.net.HttpRetryException;import java.net.URLEncoder;import com.google.gson.GsonBuilder;import com.google.gson.reflect.TypeToken;import com.zebra.savanna.Models.Classification;import com.zebra.savanna.Models.Device;import com.zebra.savanna.Models.DeviceClass;import com.zebra.savanna.Models.Product;import com.zebra.savanna.Models.Recall;import com.zebra.savanna.Models.Status;import com.zebra.savanna.Models.Errors.Error;import org.json.JSONException;/** * FDARecall --- Provides access to the Savanna FDA Recall APIs. *  * @author SLippert@zebra.com * */public final class FDARecall extends SavannaAPI {	/**	 * Returns medical device recall notices for a given description	 * 	 * @param search A simple one word search string	 * @return A string containing a result from the device recall search, if any	 * @throws HttpRetryException           Thrown if there is an error calling the	 *                                      service	 * @throws Error                        Thrown if there is an error returned	 *                                      from the service	 * @throws UnsupportedEncodingException Thrown if there is an error encoding the	 *                                      search query	 */	public static String deviceSearch(String search)			throws HttpRetryException, JSONException, Error, UnsupportedEncodingException {		return deviceSearch(search, 1);	}	/**	 * Returns medical device recall notices for a given description	 * 	 * @param search A simple one word search string	 * @param limit  Maximum number of records to return	 * @return A string containing results from the device recall search, if any	 * @throws HttpRetryException           Thrown if there is an error calling the	 *                                      service	 * @throws Error                        Thrown if there is an error returned	 *                                      from the service	 * @throws UnsupportedEncodingException Thrown if there is an error encoding the	 *                                      search query	 */	public static String deviceSearch(String search, int limit)			throws HttpRetryException, JSONException, Error, UnsupportedEncodingException {		return callService(				String.format("recalls/device/description?val=%s&limit=%s", URLEncoder.encode(search, "UTF-8"), limit));	}	/**	 * Returns drug recall notices for a given description	 * 	 * @param search A simple one word search string	 * @return A string containing a result from the drug recall search, if any	 * @throws HttpRetryException           Thrown if there is an error calling the	 *                                      service	 * @throws Error                        Thrown if there is an error returned	 *                                      from the service	 * @throws UnsupportedEncodingException Thrown if there is an error encoding the	 *                                      search query	 */	public static String drugSearch(String search)			throws HttpRetryException, JSONException, Error, UnsupportedEncodingException {		return drugSearch(search, 1);	}	/**	 * Returns drug recall notices for a given description	 * 	 * @param search A simple one word search string	 * @param limit  Maximum number of records to return	 * @return A string containing results from the drug recall search, if any	 * @throws HttpRetryException           Thrown if there is an error calling the	 *                                      service	 * @throws Error                        Thrown if there is an error returned	 *                                      from the service	 * @throws UnsupportedEncodingException Thrown if there is an error encoding the	 *                                      search query	 */	public static String drugSearch(String search, int limit)			throws HttpRetryException, JSONException, Error, UnsupportedEncodingException {		return callService(				String.format("recalls/drug/description?val=%s&limit=%s", URLEncoder.encode(search, "UTF-8"), limit));	}	/**	 * Returns food recall notices for a given UPC code	 * 	 * @param upc A valid UPC code for a food item	 * @return A string containing a result from the food recall lookup, if any	 * @throws HttpRetryException Thrown if there is an error calling the service	 * @throws Error              Thrown if there is an error returned from the	 *                            service	 */	public static String foodUpc(String upc) throws HttpRetryException, JSONException, Error {		return foodUpc(upc, 1);	}	/**	 * Returns food recall notices for a given UPC code	 * 	 * @param upc   A valid UPC code for a food item	 * @param limit Maximum number of records to return (maximum 99)	 * @return A string containing results from the food recall lookup, if any	 * @throws HttpRetryException Thrown if there is an error calling the service	 * @throws Error              Thrown if there is an error returned from the	 *                            service	 */	public static String foodUpc(String upc, int limit) throws HttpRetryException, JSONException, Error {		return callService(String.format("recalls/food/upc?val=%s&limit=%s", upc, limit));	}	/**	 * Returns FDA drug recall notices for a UPC code	 * 	 * @param upc Value	 * @return A string containing a result from the drug recall lookup, if any	 * @throws HttpRetryException Thrown if there is an error calling the service	 * @throws Error              Thrown if there is an error returned from the	 *                            service	 */	public static String drugUpc(String upc) throws HttpRetryException, JSONException, Error {		return drugUpc(upc, 1);	}	/**	 * Returns FDA drug recall notices for a UPC code	 * 	 * @param upc   Value	 * @param limit Maximum number of records to return	 * @return A string containing results from the drug recall lookup, if any	 * @throws HttpRetryException Thrown if there is an error calling the service	 * @throws Error              Thrown if there is an error returned from the	 *                            service	 */	public static String drugUpc(String upc, int limit) throws HttpRetryException, JSONException, Error {		return callService(String.format("recalls/drug/upc?val=%s&limit=%s", upc, limit));	}	/**	 * Returns medical device recall notices for a given description	 * 	 * @param search A simple one word search String	 * @return The results from the device recall search, if any	 * @throws HttpRetryException           Thrown if there is an error calling the	 *                                      service	 * @throws Error                        Thrown if there is an error returned	 *                                      from the service	 * @throws UnsupportedEncodingException Thrown if there is an error encoding the	 *                                      search query	 */	public static Recall<Device> deserializeDeviceSearch(String search)			throws HttpRetryException, JSONException, Error, UnsupportedEncodingException {		return deserializeDeviceSearch(search, 1);	}	/**	 * Returns medical device recall notices for a given description	 * 	 * @param search A simple one word search String	 * @param limit  Maximum number of records to return	 * @return The results from the device recall search, if any	 * @throws HttpRetryException           Thrown if there is an error calling the	 *                                      service	 * @throws Error                        Thrown if there is an error returned	 *                                      from the service	 * @throws UnsupportedEncodingException Thrown if there is an error encoding the	 *                                      search query	 */	public static Recall<Device> deserializeDeviceSearch(String search, int limit)			throws HttpRetryException, JSONException, Error, UnsupportedEncodingException {		String json = deviceSearch(search, limit);		Type fooType = new TypeToken<Recall<Device>>() {		}.getType();		GsonBuilder gson = new GsonBuilder();		gson.registerTypeAdapter(DeviceClass.class, new ConvertibleSerializer());		return gson.create().fromJson(json, fooType);	}	/**	 * Returns drug recall notices for a given description	 * 	 * @param search A simple one word search String	 * @return The results from the drug recall search, if any	 * @throws HttpRetryException           Thrown if there is an error calling the	 *                                      service	 * @throws Error                        Thrown if there is an error returned	 *                                      from the service	 * @throws UnsupportedEncodingException Thrown if there is an error encoding the	 *                                      search query	 */	public static Recall<Product> deserializeDrugSearch(String search)			throws HttpRetryException, JSONException, Error, UnsupportedEncodingException {		return deserializeDrugSearch(search, 1);	}	/**	 * Returns drug recall notices for a given description	 * 	 * @param search A simple one word search String	 * @param limit  Maximum number of records to return	 * @return The results from the drug recall search, if any	 * @throws HttpRetryException           Thrown if there is an error calling the	 *                                      service	 * @throws Error                        Thrown if there is an error returned	 *                                      from the service	 * @throws UnsupportedEncodingException Thrown if there is an error encoding the	 *                                      search query	 */	public static Recall<Product> deserializeDrugSearch(String search, int limit)			throws HttpRetryException, JSONException, Error, UnsupportedEncodingException {		String json = drugSearch(search, limit);		Type fooType = new TypeToken<Recall<Product>>() {		}.getType();		GsonBuilder gson = new GsonBuilder();		gson.registerTypeAdapter(Classification.class, new ConvertibleSerializer());		gson.registerTypeAdapter(Status.class, new ConvertibleSerializer());		return gson.create().fromJson(json, fooType);	}	/**	 * Returns food recall notices for a given UPC code	 * 	 * @param upc A valid UPC code for a food item	 * @return The results from the food recall lookup, if any	 * @throws HttpRetryException Thrown if there is an error calling the service	 * @throws Error              Thrown if there is an error returned from the	 *                            service	 */	public static Recall<Product> deserializeFoodUpc(String upc) throws HttpRetryException, JSONException, Error {		return deserializeFoodUpc(upc, 1);	}	/**	 * Returns food recall notices for a given UPC code	 * 	 * @param upc   A valid UPC code for a food item	 * @param limit Maximum number of records to return (maximum 99)	 * @return The results from the food recall lookup, if any	 * @throws HttpRetryException Thrown if there is an error calling the service	 * @throws Error              Thrown if there is an error returned from the	 *                            service	 */	public static Recall<Product> deserializeFoodUpc(String upc, int limit)			throws HttpRetryException, JSONException, Error {		String json = foodUpc(upc, limit);		Type fooType = new TypeToken<Recall<Product>>() {		}.getType();		GsonBuilder gson = new GsonBuilder();		gson.registerTypeAdapter(Classification.class, new ConvertibleSerializer());		gson.registerTypeAdapter(Status.class, new ConvertibleSerializer());		return gson.create().fromJson(json, fooType);	}	/**	 * Returns FDA drug recall notices for a UPC code	 * 	 * @param upc Value	 * @return The results from the drug recall lookup, if any	 * @throws HttpRetryException Thrown if there is an error calling the service	 * @throws Error              Thrown if there is an error returned from the	 *                            service	 */	public static Recall<Product> deserializeDrugUpc(String upc) throws HttpRetryException, JSONException, Error {		return deserializeDrugUpc(upc, 1);	}	/**	 * Returns FDA drug recall notices for a UPC code	 * 	 * @param upc   Value	 * @param limit Maximum number of records to return	 * @return The results from the drug recall lookup, if any	 * @throws HttpRetryException Thrown if there is an error calling the service	 * @throws Error              Thrown if there is an error returned from the	 *                            service	 */	public static Recall<Product> deserializeDrugUpc(String upc, int limit)			throws HttpRetryException, JSONException, Error {		String json = drugUpc(upc, limit);		Type fooType = new TypeToken<Recall<Product>>() {		}.getType();		GsonBuilder gson = new GsonBuilder();		gson.registerTypeAdapter(Classification.class, new ConvertibleSerializer());		gson.registerTypeAdapter(Status.class, new ConvertibleSerializer());		return gson.create().fromJson(json, fooType);	}}